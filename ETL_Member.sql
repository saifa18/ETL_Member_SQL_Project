-------------------------------------------
-- DROP tables and sequences (IN PROPER ORDER)
-------------------------------------------

-- 1) Drop MEMBER_PHONE first (it references MEMBERS)
DROP TABLE member_phone;

-- 2) Drop MEMBERS
DROP TABLE members;

-- 3) Drop MEMBERS_ACQUIRED
DROP TABLE members_acquired;

-- (Optional) Drop MEMBERS_DW if you want a clean slate
-- DROP TABLE members_dw CASCADE CONSTRAINTS;

-------------------------------------------
-- Drop sequences
-------------------------------------------
DROP SEQUENCE member_id_sq;
DROP SEQUENCE phone_id_sq;


-------------------------------------------
-- CREATE sequences 
-------------------------------------------
CREATE SEQUENCE member_id_sq
START WITH 1101 INCREMENT BY 1;

CREATE SEQUENCE phone_id_sq
START WITH 101 INCREMENT BY 1;


-------------------------------------------
-- CREATE tables 
-------------------------------------------

CREATE TABLE members
(
    member_id         NUMBER(10)     DEFAULT member_id_sq.NEXTVAL PRIMARY KEY,
    first_name        VARCHAR(40)    NOT NULL,
    middle_name       VARCHAR(40),
    last_name         VARCHAR(40)    NOT NULL,
    email_address     VARCHAR(100)   UNIQUE NOT NULL CHECK(LENGTH(email_address) >= 7),
    address           VARCHAR(100)   NULL,
    city              VARCHAR(40)    NULL,
    state             CHAR(2)        NULL,
    zip_code          CHAR(5)        NULL  
);


CREATE TABLE member_phone
(
    phone_id     NUMBER(10)  DEFAULT phone_id_sq.NEXTVAL PRIMARY KEY,
    phone_number CHAR(12),
    member_id    NUMBER(10),
    phone_type   VARCHAR(10),
    CONSTRAINT member_id_fk2 FOREIGN KEY (member_id) REFERENCES members (member_id)
);


CREATE TABLE members_acquired (
    acquired_member_id   NUMBER          PRIMARY KEY,
    MA_First_Name        VARCHAR(40)     NOT NULL,
    MA_Last_Name         VARCHAR(50)     NOT NULL,
    MA_Phone             CHAR(10)        NOT NULL,
    MA_Email             VARCHAR(50)     UNIQUE NOT NULL,
    MA_Address           VARCHAR(40)     NOT NULL,
    MA_zip_code          CHAR(5)         NOT NULL
);


-------------------------------------------
-- CREATE the Data Warehouse tables (and logs)
-------------------------------------------

CREATE TABLE MEMBERS_DW (
    MEMBER_ID      NUMBER(10,0),
    FIRST_NAME     VARCHAR2(40 BYTE),
    LAST_NAME      VARCHAR2(40 BYTE),
    EMAIL          VARCHAR2(100 BYTE),
    PHONE          CHAR(12 BYTE),
    ADDRESS        VARCHAR2(100 BYTE),
    CITY           VARCHAR2(40 BYTE),
    STATE          CHAR(2 BYTE),
    ZIP            CHAR(5 BYTE),
    DATA_SOURCE    VARCHAR2(4),
    PRIMARY KEY (MEMBER_ID, DATA_SOURCE)
);

CREATE TABLE ETL_LOG (
    LOG_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    LOG_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    OPERATION VARCHAR2(20),
    ROW_COUNT NUMBER,
    STATUS VARCHAR2(20),
    ERROR_MESSAGE VARCHAR2(4000)
);

CREATE TABLE SCHEMA_CHANGE_LOG (
    CHANGE_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    CHANGE_DESCRIPTION VARCHAR2(4000)
);

-- CHANGED: Added DATA_SOURCE column and composite FK
CREATE TABLE MEMBER_ACTIVITY (
    ACTIVITY_ID   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    MEMBER_ID     NUMBER,
    DATA_SOURCE   VARCHAR2(4),          -- CHANGED: new column
    ACTIVITY_DATE DATE,
    ACTIVITY_TYPE VARCHAR2(50),
    POINTS_EARNED NUMBER,
    FOREIGN KEY (MEMBER_ID, DATA_SOURCE) 
        REFERENCES MEMBERS_DW(MEMBER_ID, DATA_SOURCE)  -- CHANGED: composite reference
);


-------------------------------------------
-- CREATE/REPLACE VIEWS
-------------------------------------------

CREATE OR REPLACE VIEW MEMBERS_VIEW AS 
    SELECT 
        M.MEMBER_ID, 
        M.FIRST_NAME,
        M.LAST_NAME,
        M.EMAIL_ADDRESS AS EMAIL,
        -- We'll reformat phone from MEMBER_PHONE (which already has dashes).
        SUBSTR(P.PHONE_NUMBER, 1, 3) || '-' || 
        SUBSTR(P.PHONE_NUMBER, 5, 3) || '-' || 
        SUBSTR(P.PHONE_NUMBER, 9, 4) AS PHONE,
        M.ADDRESS,
        M.CITY,
        M.STATE,
        M.ZIP_CODE AS ZIP,
        'ORIG' AS DATA_SOURCE
    FROM MEMBERS M
        LEFT JOIN MEMBER_PHONE P 
        ON M.MEMBER_ID = P.MEMBER_ID;


CREATE OR REPLACE VIEW MEMBERS_ACQUIRED_VIEW AS 
    SELECT 
        ACQUIRED_MEMBER_ID AS MEMBER_ID,
        MA_FIRST_NAME AS FIRST_NAME,
        MA_LAST_NAME  AS LAST_NAME,
        MA_EMAIL      AS EMAIL, 
        -- No dashes in raw data, so substring 1-3,4-3,7-4
        SUBSTR(MA_PHONE, 1, 3) || '-' || SUBSTR(MA_PHONE, 4, 3) || '-' || SUBSTR(MA_PHONE, 7, 4) AS PHONE,
        -- For the address, split off everything before the first comma
        SUBSTR(MA_ADDRESS, 1, INSTR(MA_ADDRESS, ',') - 1) AS ADDRESS,
        'BEND' AS CITY,
        'OR'   AS STATE,
        MA_ZIP_CODE AS ZIP,
        'AQUI' AS DATA_SOURCE
    FROM MEMBERS_ACQUIRED;


-------------------------------------------
-- ETL Procedure
-------------------------------------------
CREATE OR REPLACE PROCEDURE MEMBERS_ETL_PROC AS
    v_rows_inserted NUMBER := 0;
    v_rows_updated  NUMBER := 0;
BEGIN 
    -- Insert from MEMBERS_VIEW
    INSERT INTO MEMBERS_DW( MEMBER_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE, ADDRESS, CITY, STATE, ZIP, DATA_SOURCE )
        SELECT MEMBER_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE, ADDRESS, CITY, STATE, ZIP, DATA_SOURCE
        FROM MEMBERS_VIEW
        WHERE NOT EXISTS (
            SELECT 1 FROM MEMBERS_DW 
            WHERE MEMBERS_DW.MEMBER_ID = MEMBERS_VIEW.MEMBER_ID 
              AND MEMBERS_DW.DATA_SOURCE = MEMBERS_VIEW.DATA_SOURCE
        );
    v_rows_inserted := SQL%ROWCOUNT;
    INSERT INTO ETL_LOG (OPERATION, ROW_COUNT, STATUS)
        VALUES ('INSERT MEMBERS_VIEW', v_rows_inserted, 'SUCCESS');

    -- Insert from MEMBERS_ACQUIRED_VIEW
    INSERT INTO MEMBERS_DW( MEMBER_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE, ADDRESS, CITY, STATE, ZIP, DATA_SOURCE )
        SELECT MEMBER_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE, ADDRESS, CITY, STATE, ZIP, DATA_SOURCE
        FROM MEMBERS_ACQUIRED_VIEW
        WHERE NOT EXISTS (
            SELECT 1 FROM MEMBERS_DW 
            WHERE MEMBERS_DW.MEMBER_ID = MEMBERS_ACQUIRED_VIEW.MEMBER_ID 
              AND MEMBERS_DW.DATA_SOURCE = MEMBERS_ACQUIRED_VIEW.DATA_SOURCE
        );
    v_rows_inserted := SQL%ROWCOUNT;
    INSERT INTO ETL_LOG (OPERATION, ROW_COUNT, STATUS)
        VALUES ('INSERT MEMBERS_ACQUIRED_VIEW', v_rows_inserted, 'SUCCESS');

    -- Update Members from MEMBERS_VIEW
    UPDATE MEMBERS_DW MDW
       SET (MDW.FIRST_NAME, MDW.LAST_NAME, MDW.EMAIL, MDW.PHONE, 
            MDW.ADDRESS, MDW.CITY, MDW.STATE, MDW.ZIP) =
           (
                SELECT MV.FIRST_NAME, MV.LAST_NAME, MV.EMAIL, MV.PHONE, 
                       MV.ADDRESS, MV.CITY, MV.STATE, MV.ZIP
                FROM MEMBERS_VIEW MV
                WHERE MV.MEMBER_ID   = MDW.MEMBER_ID 
                  AND MDW.DATA_SOURCE = 'ORIG'
           )
     WHERE EXISTS (
         SELECT 1 
         FROM MEMBERS_VIEW MV
         WHERE MV.MEMBER_ID   = MDW.MEMBER_ID 
           AND MDW.DATA_SOURCE = 'ORIG'
     );
    v_rows_updated := SQL%ROWCOUNT;
    INSERT INTO ETL_LOG (OPERATION, ROW_COUNT, STATUS)
        VALUES ('UPDATE MEMBERS_VIEW', v_rows_updated, 'SUCCESS');

    -- Update Members from MEMBERS_ACQUIRED_VIEW
    UPDATE MEMBERS_DW MDW
       SET (MDW.FIRST_NAME, MDW.LAST_NAME, MDW.EMAIL, MDW.PHONE,
            MDW.ADDRESS, MDW.CITY, MDW.STATE, MDW.ZIP) =
           (
                SELECT MA.FIRST_NAME, MA.LAST_NAME, MA.EMAIL, MA.PHONE,
                       MA.ADDRESS, MA.CITY, MA.STATE, MA.ZIP
                FROM MEMBERS_ACQUIRED_VIEW MA
                WHERE MA.MEMBER_ID   = MDW.MEMBER_ID 
                  AND MDW.DATA_SOURCE = 'AQUI'
           )
     WHERE EXISTS (
         SELECT 1 
         FROM MEMBERS_ACQUIRED_VIEW MA
         WHERE MA.MEMBER_ID   = MDW.MEMBER_ID 
           AND MDW.DATA_SOURCE = 'AQUI'
     );
    v_rows_updated := SQL%ROWCOUNT;
    INSERT INTO ETL_LOG (OPERATION, ROW_COUNT, STATUS)
        VALUES ('UPDATE MEMBERS_ACQUIRED_VIEW', v_rows_updated, 'SUCCESS');

EXCEPTION
    WHEN OTHERS THEN
        INSERT INTO ETL_LOG (OPERATION, STATUS, ERROR_MESSAGE)
            VALUES ('ETL_PROC', 'FAILED', SQLERRM);
        RAISE;
END MEMBERS_ETL_PROC;
/


-------------------------------------------
-- Scheduler Job
-------------------------------------------
BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
        job_name        => 'members_etl_job',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN MEMBERS_ETL_PROC; END;',
        start_date      => SYSTIMESTAMP,
        repeat_interval => 'FREQ=DAILY; BYHOUR=2',
        enabled         => TRUE
    );
END;
/

-------------------------------------------
-- Email Check Function
-------------------------------------------
CREATE OR REPLACE FUNCTION CHECK_INVALID_EMAILS RETURN NUMBER IS
    v_invalid_count NUMBER;
BEGIN
    SELECT COUNT(*)
      INTO v_invalid_count
      FROM MEMBERS_DW
     WHERE EMAIL NOT LIKE '%@%.%';

    RETURN v_invalid_count;
END;
/


-------------------------------------------
-- INSERT statements
-------------------------------------------

-- Insert members
SET DEFINE OFF;

Insert into MEMBERS (MEMBER_ID,FIRST_NAME,MIDDLE_NAME,LAST_NAME,EMAIL_ADDRESS,ADDRESS,CITY,STATE,ZIP_CODE)
  values (1001,'Fernandina','C','McCleary','fmccleary0@shinystat.com','03691 Commercial Parkway;','Dayton','OH','45419');
-- (All other INSERTs for MEMBERS as given, unchanged) ...
Insert into MEMBERS (MEMBER_ID,FIRST_NAME,MIDDLE_NAME,LAST_NAME,EMAIL_ADDRESS,ADDRESS,CITY,STATE,ZIP_CODE)
  values (1177,'Mary','Marie','Williams','mmwilliams@gmail.com','0156 Granby Junction','Helena','MT','59623');
-- etc. (omitted here for brevity but keep them in your script)

COMMIT;


-- Insert phone numbers
SET DEFINE OFF;
Insert into MEMBER_PHONE (PHONE_ID,PHONE_NUMBER,MEMBER_ID,PHONE_TYPE) values (1,'248-391-9522',1001,'P');
-- (All other INSERTs for MEMBER_PHONE as given, unchanged) ...
Insert into MEMBER_PHONE (PHONE_ID,PHONE_NUMBER,MEMBER_ID,PHONE_TYPE) values (102,'550-883-3857',1177,'P');

COMMIT;


-- Insert into MEMBERS_ACQUIRED
SET DEFINE OFF;
Insert into MEMBERS_ACQUIRED (ACQUIRED_MEMBER_ID,MA_FIRST_NAME,MA_LAST_NAME,MA_PHONE,MA_EMAIL,MA_ADDRESS,MA_ZIP_CODE)
  values (1080,'Ammamaria','Giannoni','8333748412','AmGiannoni@gmail.com','8 Linden Center,Bend,OR','97701');
-- (All other INSERTs for MEMBERS_ACQUIRED as given, unchanged) ...
Insert into MEMBERS_ACQUIRED (ACQUIRED_MEMBER_ID,MA_FIRST_NAME,MA_LAST_NAME,MA_PHONE,MA_EMAIL,MA_ADDRESS,MA_ZIP_CODE)
  values (1129,'Buckie','Sugar','1538091245','BuckiSugar@gmail.com','6910 Doe Crossing Street,Bend,OR','97703');

COMMIT;
